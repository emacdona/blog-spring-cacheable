plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.3'
    id 'io.spring.dependency-management' version '1.1.4'
}

group = 'com.consartist'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0'
    implementation 'org.apache.commons:commons-lang3:3.0.1'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'org.springframework:spring-instrument'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

ext.getJvmArgs = {
    project.configurations.findAll {
        it.name == "compileClasspath" || it.name == "productionRuntimeClasspath" || it.name == "runtimeClasspath"
    }.collectMany {
        it.files
    }.findAll {
        it.name =~ /aspectjweaver-.*\.jar/ || it.name =~ /spring-instrument-.*\.jar/
    }.toSet().collect {
        "-javaagent:${it}".toString()
    }.toList().plus("--add-opens=java.base/java.lang=ALL-UNNAMED")
}

task getJvmArgs {
    doLast {
        println(project.getJvmArgs().join(" "))
    }
}

bootRun {
    jvmArgs = project.getJvmArgs()
}

test {
    jvmArgs = project.getJvmArgs()
}

tasks.named('test') {
    useJUnitPlatform()
}
