---

x-var: &APP_IMAGE_TAG
  "consartist/blog-spring-cacheable"

services:
  # In each of our docker files, we have one service that is responsible for building
  # the app image. This will force a build b/c there is no fallback "image:" that would
  # preclude a build if the image existed.
  app-builder:
    build:
      dockerfile: docker/Dockerfile
      context: ..
      tags:
        - *APP_IMAGE_TAG
    platform: linux/amd64

  # Annoyingly, if we have two services that use the same image, we can't have a "secondary"
  # rely on a "primary" to build the image. EVEN WITH an explicit "depends_on", the secondary won't
  # succeed if the image does not exist already. You should still have an explicit "depends_on", though...
  # so that the service you are depending on to build your image builds it before this service defaults
  # to whatever "image:" it finds in docker.
  app:
    extends: app-builder
    image: *APP_IMAGE_TAG
    expose:
      - "8080"

  replicated-app:
    extends: app
    deploy:
      mode: replicated
      replicas: ${REPLICA_COUNT:-5}
      endpoint_mode: dnsrr

  redis:
    image: redis:latest
    expose:
      - "6379"
    ports:
      - "6379:6379"

  nginx:
    image: nginx:latest
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - web
    ports:
      - "8080:8080"

  postgres:
    image: postgres
    restart: always
    command: -c 'shared_buffers=512MB' -c 'max_connections=400'
    expose:
      - "5432"
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: app
      POSTGRES_PASSWORD: password
    healthcheck:
      # Note: this assumes that the service you create by extending this one is named "db".
      # The reason we need to specify a host and port here is because the "host" forces the test to be made
      # via TCP _ONLY_ -- instead of TCP or Unix Domain Sockets.
      # The reason that TCP only is important is that when the f*cking container starts, PG does some initialisation,
      # reaches a point where this check COULD succeed (via Unix Domain Sockets), and THEN IT RESTARTS THE DATABASE.
      # This creates a race condition where the db-init container starts (b/c this check succeeded) and tries to create
      # a database in a moment where the DB is currently restarting. MOST of the time, the restart is fast enough and
      # the db-init container succeeds... which made this an enormous pain in the ass to track down.
      test: [ "CMD-SHELL", "pg_isready -U app --host db --port 5432" ]
      interval: 5s
      timeout: 5s
      retries: 10

  adminer:
    image: adminer
    restart: always
    ports:
      - 9080:8080

